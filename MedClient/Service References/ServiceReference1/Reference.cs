//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34011
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MedClient.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IMedWCF")]
    public interface IMedWCF {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMedWCF/Login", ReplyAction="http://tempuri.org/IMedWCF/LoginResponse")]
        string Login([System.ServiceModel.MessageParameterAttribute(Name="login")] string login1, string pass);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMedWCF/Login", ReplyAction="http://tempuri.org/IMedWCF/LoginResponse")]
        System.Threading.Tasks.Task<string> LoginAsync(string login, string pass);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMedWCF/RegPatien", ReplyAction="http://tempuri.org/IMedWCF/RegPatienResponse")]
        string RegPatien(string userSername, string pass, string name, int hospitalId, sbyte sex, int age, string decease, string state);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMedWCF/RegPatien", ReplyAction="http://tempuri.org/IMedWCF/RegPatienResponse")]
        System.Threading.Tasks.Task<string> RegPatienAsync(string userSername, string pass, string name, int hospitalId, sbyte sex, int age, string decease, string state);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMedWCF/RegDoctor", ReplyAction="http://tempuri.org/IMedWCF/RegDoctorResponse")]
        string RegDoctor(string userSername, string pass, string name, int hospitalId, sbyte sex, int age, string decease, string state, int positionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMedWCF/RegDoctor", ReplyAction="http://tempuri.org/IMedWCF/RegDoctorResponse")]
        System.Threading.Tasks.Task<string> RegDoctorAsync(string userSername, string pass, string name, int hospitalId, sbyte sex, int age, string decease, string state, int positionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMedWCF/GetPosition", ReplyAction="http://tempuri.org/IMedWCF/GetPositionResponse")]
        string GetPosition(int positionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMedWCF/GetPosition", ReplyAction="http://tempuri.org/IMedWCF/GetPositionResponse")]
        System.Threading.Tasks.Task<string> GetPositionAsync(int positionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMedWCF/GetPacientsByHospital", ReplyAction="http://tempuri.org/IMedWCF/GetPacientsByHospitalResponse")]
        string GetPacientsByHospital(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMedWCF/GetPacientsByHospital", ReplyAction="http://tempuri.org/IMedWCF/GetPacientsByHospitalResponse")]
        System.Threading.Tasks.Task<string> GetPacientsByHospitalAsync(string name);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMedWCFChannel : MedClient.ServiceReference1.IMedWCF, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MedWCFClient : System.ServiceModel.ClientBase<MedClient.ServiceReference1.IMedWCF>, MedClient.ServiceReference1.IMedWCF {
        
        public MedWCFClient() {
        }
        
        public MedWCFClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MedWCFClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MedWCFClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MedWCFClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string Login(string login1, string pass) {
            return base.Channel.Login(login1, pass);
        }
        
        public System.Threading.Tasks.Task<string> LoginAsync(string login, string pass) {
            return base.Channel.LoginAsync(login, pass);
        }
        
        public string RegPatien(string userSername, string pass, string name, int hospitalId, sbyte sex, int age, string decease, string state) {
            return base.Channel.RegPatien(userSername, pass, name, hospitalId, sex, age, decease, state);
        }
        
        public System.Threading.Tasks.Task<string> RegPatienAsync(string userSername, string pass, string name, int hospitalId, sbyte sex, int age, string decease, string state) {
            return base.Channel.RegPatienAsync(userSername, pass, name, hospitalId, sex, age, decease, state);
        }
        
        public string RegDoctor(string userSername, string pass, string name, int hospitalId, sbyte sex, int age, string decease, string state, int positionId) {
            return base.Channel.RegDoctor(userSername, pass, name, hospitalId, sex, age, decease, state, positionId);
        }
        
        public System.Threading.Tasks.Task<string> RegDoctorAsync(string userSername, string pass, string name, int hospitalId, sbyte sex, int age, string decease, string state, int positionId) {
            return base.Channel.RegDoctorAsync(userSername, pass, name, hospitalId, sex, age, decease, state, positionId);
        }
        
        public string GetPosition(int positionId) {
            return base.Channel.GetPosition(positionId);
        }
        
        public System.Threading.Tasks.Task<string> GetPositionAsync(int positionId) {
            return base.Channel.GetPositionAsync(positionId);
        }
        
        public string GetPacientsByHospital(string name) {
            return base.Channel.GetPacientsByHospital(name);
        }
        
        public System.Threading.Tasks.Task<string> GetPacientsByHospitalAsync(string name) {
            return base.Channel.GetPacientsByHospitalAsync(name);
        }
    }
}
